/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.project.frames;

import com.project.model.Location;
import com.project.model.Session;
import com.project.util.dbdetail;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import com.project.model.Consecutive;
import com.project.s2.DisplayStudentsTimetable;
import com.project.s2.GenarateTimeTableStructure;
import com.project.s2.ViewSessions;
/**
 *
 * @author Hansi
 */
public class AddConsecutive extends javax.swing.JFrame {
private static Connection con;
     
    
     private PreparedStatement b1;
     private PreparedStatement b2;
     private PreparedStatement b3;
     private PreparedStatement b4;
     private PreparedStatement b5;
     private PreparedStatement b6;
     private PreparedStatement b7;
     private PreparedStatement b8;
     private PreparedStatement b9;
     private PreparedStatement b10;
     private PreparedStatement b11;
       private PreparedStatement ps3;
        private PreparedStatement ps2;
    /**
     * Creates new form LocationHome
     */
    public AddConsecutive() {
        initComponents();
        displaySessions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consec_tab = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        id1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        loc2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sec2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        day = new javax.swing.JComboBox<String>();
        jSpinner1 = new javax.swing.JSpinner();
        rid = new javax.swing.JSpinner();
        jButton4 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        jPanel1.setBackground(new java.awt.Color(51, 0, 51));

        jButton9.setBackground(new java.awt.Color(204, 204, 255));
        jButton9.setText("Main Menu");
        jButton9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 0, 153));
        jPanel2.setAlignmentY(0.0F);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Location");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(527, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Add Consecutive Sessions");

        consec_tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Session", "Status"
            }
        ));
        consec_tab.setRowHeight(100);
        consec_tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consec_tabMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(consec_tab);

        jLabel3.setText("Session Selected");

        id1.setBackground(new java.awt.Color(255, 204, 204));
        id1.setText(" ");

        jLabel4.setText("Consecutive Session");

        loc2.setBackground(new java.awt.Color(255, 204, 204));
        loc2.setText(" ");

        jLabel6.setText("Location");

        sec2.setBackground(new java.awt.Color(255, 204, 204));
        sec2.setText(" ");

        jButton3.setText("Add Sessions");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Day");

        jLabel7.setText("Time Slot");

        day.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mon", "tue", "wed", "thur", "fri", "sat", "sun", " " }));

        jButton4.setText("View Time Slot ID");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 571, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sec2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(id1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(loc2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(day, 0, 107, Short.MAX_VALUE)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rid))
                        .addGap(65, 65, 65)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(id1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(sec2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loc2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consec_tabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consec_tabMouseClicked
        // TODO add your handling code here:
                int i=consec_tab.getSelectedRow();
         TableModel model=consec_tab.getModel();
        String id=model.getValueAt(i,0).toString();
         
        try{
                 int y=Integer.parseInt(id);
        JOptionPane.showMessageDialog(null, "You Have Selected Session:"+y+"");
//        id1.setText(id);
            displayLoc(y);
        }catch(Exception e){}
        
        
        
    }//GEN-LAST:event_consec_tabMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int y=calledByAddSessions();
        if(y==-45){}
        else if(y==-89){
        JOptionPane.showMessageDialog(null, "All the lectuers ,that belong to this sessions tables have not created yet.Please create it and try again.");
        }
        else if(y==-77){
        JOptionPane.showMessageDialog(null, "Students table has not created yet.Plese create it and try again.");
        }else if(y==-79){
        JOptionPane.showMessageDialog(null, "Location table has not created yet.Plese create it and try again.");
        }
        else if(y==-34){
        JOptionPane.showMessageDialog(null, "location and students time slots are not matching");
        }else if(y==-64){
        JOptionPane.showMessageDialog(null, "lectuers and students time slots are not matching");
        }else if(y==-900){
            JOptionPane.showMessageDialog(null, "Not enough time slots for for the duration in students time table or Yoour Raw ID is not belong to the selected student grp");
        }else if(y==-800){
            JOptionPane.showMessageDialog(null, "Not enough time slots for for the duration in location time table");
        }else if(y==-880){
            JOptionPane.showMessageDialog(null, "Not enough time slots for for the duration in some lectuers time table time table");
        }
        
        AddConsecutive ob4=new AddConsecutive();
        ob4.setVisible(true);
        
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        mainframe ob=new mainframe();
        ob.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DisplayStudentsTimetable a = new DisplayStudentsTimetable();
        a.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddConsecutive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddConsecutive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddConsecutive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddConsecutive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddConsecutive().setVisible(true);
            }
        });
    }
      private void UpdateSession(int id){
         try {
             //int id=Integer.parseInt(SID.getText());
           con = dbdetail.getCon();
            ps2 = con.prepareStatement("UPDATE sessions set status='Consecutive_Added' where id=?");
             ps2.setInt(1, id);
            ps2.execute();
             
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
         private void displaySessions(){
    DefaultTableModel model1 =(DefaultTableModel)consec_tab.getModel();
        Object[] row=new Object[10];
        
        ArrayList<Session> ar= getSessions();
        
        for(Object x:ar){
            Session object=new Session();
            object = (Session) x;
            
        row[0]=object.getId();    
        //lec,tag,s_grp,sub_grp,subject_c,no_students,duration
        String sess="<html>"+"<br>"+object.getLec()+"<br>"+object.getTag()+"<br>"+object.getS_grp()+"<br>"+object.getSub_grp()+"<br>"+object.getSubject_c()+"<br>"+"No of Students"+object.getN0_students()+"<br>"+"Duration"+object.getDuration()+"<br>"+"</html>";
        row[1]=sess;
        row[2]=object.getStatus();
       
        model1.addRow(row);
        }
}
         
         //Get details
    private ArrayList<Session> getSessions(){
         ArrayList arr=new ArrayList();
        try {
            con = dbdetail.getCon();
            b2 = con.prepareStatement("select * from sessions where status =?");
            b2.setString(1,"consecutive");
            ResultSet set = b2.executeQuery();
            
            while (set.next()) {
                //name+emmid+faculty+department+center+building+level+rank123
                Session ar=new Session();
                ar.setId(set.getInt(1));
                ar.setLec(set.getString(2));
                 ar.setTag(set.getString(3));
                ar.setS_grp(set.getString(4));
                ar.setSub_grp(set.getString(5));
                ar.setSubject_c(set.getString(6));
                ar.setN0_students(set.getInt(7));
                ar.setDuration(set.getInt(8));
                ar.setStatus(set.getString(9));
                
                arr.add(ar);
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Preview.class.getName()).log(Level.SEVERE, null, ex);
        }
        return arr;
    }
    
    public Consecutive getdetails(int id){
                 Consecutive lo = new Consecutive();
        try {
           con = dbdetail.getCon();
          b1 = con.prepareStatement("select sid1,sid2,lid from consecutive where sid1=? or sid2=?");
             b1.setInt(1,id);
             b1.setInt(2,id);
             
            ResultSet set = b1.executeQuery();
             while (set.next()) {
                //name+emmid+faculty+department+center+building+level+rank123
                lo.setSid1(set.getInt(1));
                lo.setSid2(set.getInt(2));
                lo.setLoc(set.getString(3));
               
            }
   
        } catch (SQLException ex) {
            Logger.getLogger(Preview.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lo;
        
    }
     private void displayLoc(int id){
    //getOneLec(id);
    Consecutive object=new Consecutive();
    object = getdetails(id);
   
    
//        rName.setText(object.getRoomName());
//        String name = String.valueOf(object.getRoomName());
        sec2.setText(String.valueOf(object.getSid2()));
        loc2.setText(object.getLoc());
         id1.setText(String.valueOf(object.getSid1()));
    }

    private Session getGroupId(int id){
         Session lo = new Session();
        try {
           con = dbdetail.getCon();
          b3 = con.prepareStatement("select s_grp from sessions where id=?");
             b3.setInt(1,id);
              
            ResultSet set = b3.executeQuery();
              lo.setS_grp(set.getString(1));
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Preview.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lo;
    }
    /////////////////////////////////////////////////////////////////////////////////
    
        private int findLectuersHasCreatedTheTable(int id){
        
        try {
           con = dbdetail.getCon();
            b4 = con.prepareStatement("select * from lec_timetable where lecid=?");
             b4.setInt(1, id);
            ResultSet rs11 = b4.executeQuery();
             while (rs11.next()) {
                 
              
               return 890;
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        return -1;
    } 
        private int findLocationHasCreatedTheTable(int id){
        
        try {
           con = dbdetail.getCon();
            b5 = con.prepareStatement("select * from room_timetable where roomid=?");
             b5.setInt(1, id);
            ResultSet rs11 = b5.executeQuery();
             while (rs11.next()) {
                 
              
               return 890;
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        return -1;
    }
        
            private int findStudentHasCreatedTheTable(int id){
        
        try {
           con = dbdetail.getCon();
            b6 = con.prepareStatement("select * from stu_timetable where stuid=?");
             b6.setInt(1, id);
            ResultSet rs11 = b6.executeQuery();
             while (rs11.next()) {
                 
              
               return 890;
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        return -1;
    } 
            
            /////////////////////////////////////////////////
      
        
            private Session getOneDetailSession(int id){
        Session ar=new Session();
        try {
           con = dbdetail.getCon();
            b7 = con.prepareStatement("select id,lec,tag,s_grp,sub_grp,subject_c,no_students,duration,status from sessions where id=?");
             b7.setInt(1, id);
            ResultSet rs11 = b7.executeQuery();
             while (rs11.next()) {
                 
                ar.setId(rs11.getInt(1));
                ar.setLec(rs11.getString(2));
                 ar.setTag(rs11.getString(3));
                ar.setS_grp(rs11.getString(4));
                ar.setSub_grp(rs11.getString(5));
                ar.setSubject_c(rs11.getString(6));
                ar.setN0_students(rs11.getInt(7));
                ar.setDuration(rs11.getInt(8));
                ar.setStatus(rs11.getString(9));
        
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ar;
    }
            
            
                private int findLecId(String name){
        int lec_id=-89;
        try {
            
            con = dbdetail.getCon();
            
            b5 = con.prepareStatement("select id from lec where name =?");
            b5.setString(1, name);
            ResultSet rs2 = b5.executeQuery();
            
            while (rs2.next()) {
                
                lec_id=rs2.getInt(1);
                
                
               
                
            }
            
             con.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddConsecutive.class.getName()).log(Level.SEVERE, null, ex);
        }
        return lec_id;     
    }
                
                
                
                
                
                
                
   
    private int calledByAddSessions(){
   
        //location
        //session 1
        //session 2
        
        int sessionid1=Integer.parseInt(id1.getText());
        
        int sessionid2=Integer.parseInt(sec2.getText());
        
        int location=Integer.parseInt(loc2.getText());
        
        String day_s =(String) day.getSelectedItem();
        
        int raw_id=(int) rid.getValue();
        
        System.out.println("addddddddding connnnnnnn"+sessionid1+"ppppppp"+sessionid2+"pppppppppp"+location);
        
        Session ob1=new Session();
        ob1=getOneDetailSession(sessionid1);
        
        Session ob2=new Session();
        ob2=getOneDetailSession(sessionid2);
        
        int duration1=ob1.getDuration();
        int duration2=ob2.getDuration();
        
         //lectuer handling for session 1
        String lec1=ob1.getLec();
        String[] arrLec1 = lec1.split(",");
        
        int lec_count1 = arrLec1.length;
        int[] lecArr1=new int[lec_count1];
        
        int lec_cc1=-1;
        for(String jj:arrLec1){
       // System.out.println("spliit array"+jj);
            int xxx1 = findLecId(jj);
            //System.out.println("lec id******************"+xxx);
            lec_cc1++;
            lecArr1[lec_cc1]=xxx1;
            
        //lecArr.add();
        }
        //getting the lecturer tables has created
        for(int i=0;i<=lec_cc1;i++){
            int lec_yy1=findLectuersHasCreatedTheTable(lecArr1[i]);
            if(lec_yy1==-1){
             return -89;
            }
            
        }
        
        //lectuer handling for session 2
         //lectuer handling
        String lec2=ob2.getLec();
        String[] arrLec2 = lec2.split(",");
        
        int lec_count2 = arrLec2.length;
        int[] lecArr2=new int[lec_count2];
        
        int lec_cc2=-1;
        for(String jj:arrLec2){
       // System.out.println("spliit array"+jj);
            int xxx2 = findLecId(jj);
            //System.out.println("lec id******************"+xxx);
            lec_cc2++;
            lecArr2[lec_cc2]=xxx2;
            
        //lecArr.add();
        }
        //getting the lecturer tables has created
        for(int i=0;i<=lec_cc2;i++){
            int lec_yy2=findLectuersHasCreatedTheTable(lecArr2[i]);
            if(lec_yy2==-1){
             return -89;
            }
            
        }
        
        /********************************************************************************************/
        //checking students time tables and location time table has created.
        //getting the student group by
        int sudentgroupID=getOneDetaillStudent(ob1.getS_grp());
        //checking if the time table created
        int yy=findStudentHasCreatedTheTable(sudentgroupID);
        if(yy==-1){
            return -77;
        }
        int locyy=findLocationHasCreatedTheTable(location);
        if(locyy==-1){
            return -79;
        }
        JOptionPane.showMessageDialog(null, "Checking Whether all the time table has created, is succedded.Other parts are proceeding");
        
        //GETTING SESSIONS DETAILS
        
         String ll=gettinnglocationName(location);
        String sessionDeatils1="<html>"+ob1.getLec()+"<br>"+ob1.getS_grp()+"<br>"+ob1.getSub_grp()+"<br>"+ob1.getSubject_c()+"<br>"+ob1.getTag()+"<br>"+","+ll+"</html>";
        
        String sessionDeatils2="<html>"+ob2.getLec()+"<br>"+ob2.getS_grp()+"<br>"+ob2.getSub_grp()+"<br>"+ob2.getSubject_c()+"<br>"+ob2.getTag()+"<br>"+","+ll+"</html>";

        float[] checkts= getTimeSlots(raw_id);
        
        float timeslott=checkts[1];
        
        //checking wheather room tt has the same time slot and timeslot type
        //JOptionPane.showMessageDialog(null, timeslott);
        float[] checks_location=getTimeSlotsLoc(timeslott,location);
        //checking lectuers also have the same time slot and timeslot type
         //returning if not available time slots
        if(checks_location[0]==-100){
         return -34;
        }
        
        
        //lec 1 checking process
         for(int j=0;j<=lec_cc1;j++){
            float[] checks_lec1 = getTimeSlotsLectueres(timeslott,lecArr1[j]);
            if(checks_lec1[0]==-500){
            return -64;
            }
            
            if(checks_lec1[0]==-1){
        
            for(int y=0;y<duration1;y++){
            int no1=(int) (y+checks_lec1[1]);    
            String rrr = checkIfLec(no1,day_s,location,sessionDeatils1,lecArr1[j]);    
            System.out.println("checkfree  "+y+rrr);
            if(!rrr.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                return -880;
            }
            
            }
            
        
        }else{
            for(int y=0;y<duration1*2;y++){
             int no2=(int) (y+checks_lec1[1]);    
             String rrr1 = checkIfLec(no2,day_s,location,sessionDeatils1,lecArr1[j]);        
             System.out.println("checkfree  "+y+"*******"+rrr1);
             if(!rrr1.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                 return -880;
            }
            }
            
        }
            
            
        }
         //lec 2 checking process
         for(int j=0;j<=lec_cc2;j++){
            float[] checks_lec2 = getTimeSlotsLectueres(timeslott,lecArr2[j]);
            if(checks_lec2[0]==-500){
            return -64;
            }
            
            if(checks_lec2[0]==-1){
        
            for(int y=0;y<duration2;y++){
            int no1=(int) (y+checks_lec2[1]);    
            String rrr = checkIfLec(no1,day_s,location,sessionDeatils2,lecArr2[j]);    
            System.out.println("checkfree  "+y+rrr);
            if(!rrr.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                return -880;
            }
            
            }
            
        
        }else{
            for(int y=0;y<duration2*2;y++){
             int no2=(int) (y+checks_lec2[1]);    
             String rrr1 = checkIfLec(no2,day_s,location,sessionDeatils2,lecArr2[j]);        
             System.out.println("checkfree  "+y+"*******"+rrr1);
             if(!rrr1.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                 return -880;
            }
            }
            
        }
            
            
        }
        
       JOptionPane.showMessageDialog(null, "Checking Whether all lectuers tables have, all the time slots available, is succedded.Other parts are proceeding");
        int totDuration=ob1.getDuration()+ob2.getDuration();
       
       //checking locations
         if(checks_location[0]==-1){
        
            for(int y=0;y<totDuration;y++){
            int no1=(int) (y+checks_location[1]);    
            String rrr = checkIfFreeLocation(no1,day_s,location,sessionDeatils1,location);    
            System.out.println("checkfree  "+y+rrr);
            if(!rrr.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                return -800;
            }
            
            }
            
        
        }else{
            for(int y=0;y<totDuration*2;y++){
             int no2=(int) (y+checks_location[1]);    
             String rrr1 = checkIfFreeLocation(no2,day_s,location,sessionDeatils1,location);        
             System.out.println("checkfree  "+y+"*******"+rrr1);
             if(!rrr1.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                 return -800;
            }
            }}
         
          JOptionPane.showMessageDialog(null, "Checking Whether location table has all the time slots available, is succedded.Other parts are proceeding");
          
           //checking students
        if(checkts[0]==-1){
        
            for(int y=0;y<totDuration;y++){
            String rrr=checkIfFree(y+raw_id,day_s,location,sessionDeatils1,sudentgroupID);    
            System.out.println("checkfree  "+y+rrr);
            if(!rrr.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                return -900;
            }
            
            }
            
        
        }else{
            for(int y=0;y<totDuration*2;y++){
             String rrr1=checkIfFree(y+raw_id,day_s,location,sessionDeatils1,sudentgroupID);        
             System.out.println("checkfree  "+y+"*******"+rrr1);
             if(!rrr1.equalsIgnoreCase("Yes")){
               //int s=Integer.parseInt("ttt");
                 return -900;
            }
            }
            
             }
        JOptionPane.showMessageDialog(null, "Checking Whether students table has all the time slots available, is succedded.Other parts are proceeding");
        
        //session 1 adding to students time table
        
        //getting last raw id in adding tables
        int raw_count_id_STU=0;
        int raw_count_id_LOC=0;
        
        if(checkts[0]==-1){
        
            
            for(int y=0;y<duration1;y++){
             System.out.println("Raw count ID:"+y+raw_id);
            AddSeesionstott(y+raw_id,day_s,location,sessionDeatils1,sudentgroupID);
            raw_count_id_STU++;
            }
        
        }else{
            
            for(int y=0;y<duration1*2;y++){
             System.out.println("Raw count ID:"+y+raw_id);
            AddSeesionstott(y+raw_id,day_s,location,sessionDeatils1,sudentgroupID);
            raw_count_id_STU++;
            }
  
        }
       // JOptionPane.showMessageDialog(null, "Students time table is Updated.Other parts are proceeding");
        //session2 adding to students time table
        if(checkts[0]==-1){
        
            
            for(int y=0;y<duration2;y++){
             System.out.println("Raw count ID SESSION2 :"+y+raw_id+raw_count_id_STU);
            AddSeesionstott(y+raw_id+raw_count_id_STU,day_s,location,sessionDeatils2,sudentgroupID);
            }
        
        }else{
            
            for(int y=0;y<duration2*2;y++){
            System.out.println("Raw count ID SESSION2 :"+y+raw_id+raw_count_id_STU);
            AddSeesionstott(y+raw_id+raw_count_id_STU,day_s,location,sessionDeatils2,sudentgroupID);
            }
  
        }
        JOptionPane.showMessageDialog(null, "Students time table is Updated.Other parts are proceeding");
        
         //Addning locations for session 1
        if(checks_location[0]==-1){
            for(int y=0;y<duration1;y++){
            int no1=(int) (y+checks_location[1]);
            AddSeesionstottLocation(no1,day_s,location,sessionDeatils1,location);
             raw_count_id_LOC++;
            }
        
        }else{
            
            
            for(int y=0;y<duration1*2;y++){
            int no2=(int) (y+checks_location[1]);
            AddSeesionstottLocation(no2,day_s,location,sessionDeatils1,location);
             raw_count_id_LOC++;
            }
            
        
        
        }
        
         
          //Addning locations for session 2
        if(checks_location[0]==-1){
            for(int y=0;y<duration2;y++){
            int no1=(int) (y+checks_location[1])+raw_count_id_LOC;
            AddSeesionstottLocation(no1,day_s,location,sessionDeatils2,location);
            }
        
        }else{
            
            
            for(int y=0;y<duration2*2;y++){
            int no2=(int) (y+checks_location[1])+raw_count_id_LOC;
            AddSeesionstottLocation(no2,day_s,location,sessionDeatils2,location);
            }
            
        
        
        }
         JOptionPane.showMessageDialog(null, "Locations time table is Updated.Other things are proceeding");
        
        //adding lec1
         
         for(int j=0;j<=lec_cc1;j++){
            float[] checks_lec1 = getTimeSlotsLectueres(timeslott,lecArr1[j]);
            if(checks_lec1[0]==-1){
            for(int y=0;y<duration1;y++){
            int no1=(int) (y+checks_lec1[1]);
            AddSeesionstottLect(no1,day_s,location,sessionDeatils1,lecArr1[j]);
            }
        
        }else{
            
            
            for(int y=0;y<duration1*2;y++){
            int no2=(int) (y+checks_lec1[1]);
            AddSeesionstottLect(no2,day_s,location,sessionDeatils1,lecArr1[j]);
            }
            
        
        
        }
        
        
        }
         //addig lec2
          for(int j=0;j<=lec_cc2;j++){
            float[] checks_lec2 = getTimeSlotsLectueres(timeslott,lecArr2[j]);
            if(checks_lec2[0]==-1){
            for(int y=0;y<duration2;y++){
            int no1=(int) (y+checks_lec2[1]);
            AddSeesionstottLect(no1,day_s,location,sessionDeatils2,lecArr2[j]);
            }
        
        }else{
            
            
            for(int y=0;y<duration2*2;y++){
            int no2=(int) (y+checks_lec2[1]);
            AddSeesionstottLect(no2,day_s,location,sessionDeatils2,lecArr2[j]);
            }
            
        
        
        }
        
        
        }
         JOptionPane.showMessageDialog(null, "All lectuers  time tables are Updated.");
         
         UpdateSession(sessionid1);
         UpdateSession(sessionid2);
        
    return 0;
    }
        private void AddSeesionstottLect(int rid,String cid,int loc,String session,int locId){

       
         try {
                       String  sql = "UPDATE lec_timetable"
                        + " SET `" + cid + "` = ?"
                        + " WHERE id = ? AND lecid=?";
                        con = dbdetail.getCon();
                        
                        //ps3 = con.prepareStatement("UPDATE stu_timetable SET mon=?,tue=? where id=? ");
                        ps3 = con.prepareStatement(sql);
                        ps3.setString(1,session);
                        ps3.setInt(2,rid);
                        ps3.setInt(3,locId);
                        
                        
                        
                       
                        ps3.execute();
                        //System.out.println("hello");
                        //UpdateSession();
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
   
    
    }
        private void AddSeesionstottLocation(int rid,String cid,int loc,String session,int locId){

       
         try {
                       String  sql = "UPDATE room_timetable"
                        + " SET `" + cid + "` = ?"
                        + " WHERE id = ? AND roomid=?";
                        con = dbdetail.getCon();
                        
                        //ps3 = con.prepareStatement("UPDATE stu_timetable SET mon=?,tue=? where id=? ");
                        ps3 = con.prepareStatement(sql);
                        ps3.setString(1,session);
                        ps3.setInt(2,rid);
                        ps3.setInt(3,locId);
                        
                        
                        
                       
                        ps3.execute();
                        //System.out.println("hello");
                        //UpdateSession();
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
   
    
    }
     private void AddSeesionstott(int rid,String cid,int loc,String session,int stuid){

        /*
        sql = "UPDATE diseaseinfo"
      + " SET `" + colname + "` = ?"
      + " WHERE companyname = 'mycom' AND diseaseName = ?";
        
        preparedStmt.setString(1, attrData);
        preparedStmt.setString(2, medname);
        */
         try {
                       String  sql = "UPDATE stu_timetable"
                        + " SET `" + cid + "` = ?"
                        + " WHERE id = ? AND stuid=?";
                        con = dbdetail.getCon();
                        
                        //ps3 = con.prepareStatement("UPDATE stu_timetable SET mon=?,tue=? where id=? ");
                        ps3 = con.prepareStatement(sql);
                        ps3.setString(1,session);
                        ps3.setInt(2,rid);
                        ps3.setInt(3,stuid);
                        
                        
                        
                       
                        ps3.execute();
                        //System.out.println("hello");
                        
                        //UpdateSession();
        
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
   
    
    }
    
     private int getOneDetaillStudent(String name){
        
        try {
           con = dbdetail.getCon();
            b7 = con.prepareStatement("select stuid from students where grpid=?");
             b7.setString(1, name);
            ResultSet rs11 = b7.executeQuery();
             while (rs11.next()) {
                 
              int k=rs11.getInt(1);
               return k;
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        return -1;
    } 
          private String gettinnglocationName(int id){
     try {
             String x;
             
             con = dbdetail.getCon();
             
             b8 = con.prepareStatement("select name from room where id =?");
             b8.setInt(1, id);
             ResultSet rs2 = b8.executeQuery();
             
             while (rs2.next()) {
                 
                 x=rs2.getString(1);
                
                 
                 return x;
                 
             }
             
             con.close();
             
             
             
            
         } catch (SQLException ex) {
             Logger.getLogger(AddConsecutive.class.getName()).log(Level.SEVERE, null, ex);
         }
        
         return "notfound"; 
    }
          
          
    private float[] getTimeSlots(int id){
        float k1=0;
        float k2=0;
        float[] re=new float[2];
    try {
           con = dbdetail.getCon();
            b9 = con.prepareStatement("select timeslot from stu_timetable where id=?");
             b9.setInt(1, id);
            ResultSet rs11 = b9.executeQuery();
             while (rs11.next()) {
                 
              k1=rs11.getFloat(1);
              
              //JOptionPane.showMessageDialog(null, k1);
              
              re[1]=k1; 
                
            }
             
             b9 = con.prepareStatement("select timeslot from stu_timetable where id=?");
             b9.setInt(1, id+1);
            ResultSet rs12 = b9.executeQuery();
             while (rs12.next()) {
                 
              k2=rs12.getFloat(1);
               
                
            }
            
            re[0]=k1-k2;
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("checking time slottttt"+re);
        return re;
        
    
    }
     private float[] getTimeSlotsLoc(float timeslott,int locationID){
       // JOptionPane.showMessageDialog(null, "INSIDE getTimeSlotLoc");
        int k1=-78;
        float k2=0;
        float re[]=new float[2];
    try {
           con = dbdetail.getCon();
            b10 = con.prepareStatement("select id from room_timetable where roomid=? and timeslot=?");
             b10.setInt(1, locationID);
             b10.setFloat(2, timeslott);
            ResultSet rs11 = b10.executeQuery();
             while (rs11.next()) {
                 //JOptionPane.showMessageDialog(null, "INSIDE getTimeSlotLoc 1st while loop");
              k1=rs11.getInt(1);
              re[1]=k1;
                
            }
             if(k1==-78){
                 re[0]=-100;
             return re;
             }
             b10 = con.prepareStatement("select timeslot from stu_timetable where id=?");
             b10.setInt(1,k1+1);
            ResultSet rs12 = b10.executeQuery();
             while (rs12.next()) {
                 
              k2=rs12.getFloat(1);
               
                
            }
            
            re[0]=timeslott-k2;
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("checking time slottttt"+re);
        return re;
        
    
    }          
         private float[] getTimeSlotsLectueres(float timeslott,int lecID){
       // JOptionPane.showMessageDialog(null, "INSIDE getTimeSlotLoc");
        int k1=-78;
        float k2=0;
        float re[]=new float[2];
    try {
           con = dbdetail.getCon();
            b11 = con.prepareStatement("select id from lec_timetable where lecid=? and timeslot=?");
             b11.setInt(1, lecID);
             b11.setFloat(2, timeslott);
            ResultSet rs11 = b11.executeQuery();
             while (rs11.next()) {
                 //JOptionPane.showMessageDialog(null, "INSIDE getTimeSlotLoc 1st while loop");
              k1=rs11.getInt(1);
              re[1]=k1;
                
            }
             if(k1==-78){
                 re[0]=-500;
             return re;
             }
             b11 = con.prepareStatement("select timeslot from lec_timetable where id=?");
             b11.setInt(1,k1+1);
            ResultSet rs12 = b11.executeQuery();
             while (rs12.next()) {
                 
              k2=rs12.getFloat(1);
               
                
            }
            
            re[0]=timeslott-k2;
        } catch (SQLException ex) {
            Logger.getLogger(Lecturer_view.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("checking time slottttt"+re);
        return re;
        
    
    }
         private String checkIfLec(int rid,String cid,int loc,String session,int stuid){
            String ret="";
            int k=0;
      
         try {
                       con = dbdetail.getCon();
                        b1 = con.prepareStatement("select mon,tue,wed,thur,fri,sat,sun from lec_timetable where id = ? AND lecid=?");
                        b1.setInt(1,rid);
                        b1.setInt(2,stuid);
                        
                        if(cid.equals("mon")){
                        k=1;
                        }else if(cid.equals("tue")){
                        k=2;
                        }else if(cid.equals("wed")){
                        k=3;
                        }else if(cid.equals("thur")){
                        k=4;
                        }else if(cid.equals("fri")){
                        k=5;
                        }else if(cid.equals("sat")){
                        k=6;
                        }else if(cid.equals("sun")){
                        k=7;
                        }
                        
                        ResultSet rs11 = b1.executeQuery();
                        while (rs11.next()) {
                 
                        ret=rs11.getString(k);
                        
                
                        }
                        
                        
                        
        
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
    return ret;
    
    }
         
  private String checkIfFree(int rid,String cid,int loc,String session,int stuid){
            String ret="";
            int k=0;
        /*
        sql = "UPDATE diseaseinfo"
      + " SET `" + colname + "` = ?"
      + " WHERE companyname = 'mycom' AND diseaseName = ?";
        
        preparedStmt.setString(1, attrData);
        preparedStmt.setString(2, medname);
        */
         try {
                      /* String  sql = "SELECT"+cid+"From  stu_timetable"
                        + " WHERE id = ? AND stuid=?";
                        con = dbdetail.getCon();*/
                        
                        //ps3 = con.prepareStatement("UPDATE stu_timetable SET mon=?,tue=? where id=? ");
                        con = dbdetail.getCon();
                        b2 = con.prepareStatement("select mon,tue,wed,thur,fri,sat,sun from stu_timetable where id = ? AND stuid=?");
                        b2.setInt(1,rid);
                        b2.setInt(2,stuid);
                        
                        if(cid.equals("mon")){
                        k=1;
                        }else if(cid.equals("tue")){
                        k=2;
                        }else if(cid.equals("wed")){
                        k=3;
                        }else if(cid.equals("thur")){
                        k=4;
                        }else if(cid.equals("fri")){
                        k=5;
                        }else if(cid.equals("sat")){
                        k=6;
                        }else if(cid.equals("sun")){
                        k=7;
                        }
                        
                        ResultSet rs11 = b2.executeQuery();
                        while (rs11.next()) {
                 
                        ret=rs11.getString(k);
                        
                
                        }
                        
                        
                        
        
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
    return ret;
    
    }
  private String checkIfFreeLocation(int rid,String cid,int loc,String session,int stuid){
            String ret="";
            int k=0;
      
         try {
                       con = dbdetail.getCon();
                        b3 = con.prepareStatement("select mon,tue,wed,thur,fri,sat,sun from room_timetable where id = ? AND roomid=?");
                        b3.setInt(1,rid);
                        b3.setInt(2,stuid);
                        
                        if(cid.equals("mon")){
                        k=1;
                        }else if(cid.equals("tue")){
                        k=2;
                        }else if(cid.equals("wed")){
                        k=3;
                        }else if(cid.equals("thur")){
                        k=4;
                        }else if(cid.equals("fri")){
                        k=5;
                        }else if(cid.equals("sat")){
                        k=6;
                        }else if(cid.equals("sun")){
                        k=7;
                        }
                        
                        ResultSet rs11 = b3.executeQuery();
                        while (rs11.next()) {
                 
                        ret=rs11.getString(k);
                        
                
                        }
                        
                        
                        
        
            con.setAutoCommit(false);
            con.close();
         } catch (Exception ex) {
             
             Logger.getLogger(WorkingDays_new.class.getName()).log(Level.SEVERE, null, ex);
         
         }
    return ret;
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable consec_tab;
    private javax.swing.JComboBox<String> day;
    private javax.swing.JLabel id1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel loc2;
    private javax.swing.JSpinner rid;
    private javax.swing.JLabel sec2;
    // End of variables declaration//GEN-END:variables
}
